# ------------------------------------------------------- amrlib sources
AMR_C_SOURCES = 	main.C \
	Amr.C           AmrLevel.C         BCRec.C    \
	Cluster.C       Derive.C   	   ErrorList.C \
	FluxRegister.C  Interpolater.C     RunStats.C \
	StateData.C     StateDescriptor.C  TagBox.C \
	Contour.C

#AMR_C_SOURCES += 	Raster.C
AMR_C_HEADERS = \
	Amr.H           AmrLevel.H	BCRec.H \
	Cluster.H	Contour.H	Derive.H \
	ErrorList.H  	FluxRegister.H	Interpolater.H \
	LevelBld.H      RunStats.H \
 	StateData.H  	StateDescriptor.H 
#AMR_C_HEADERS += Raster.H

AMR_F_SOURCES = INTERP_$(DIM)D.F 	FLUXREG_$(DIM)D.F 	FILCC_$(DIM)D.F 
AMR_F_HEADERS = INTERP_F.H BC_TYPES.H PROB_AMR_F.H FLUXREG_F.H MAKESLICE_F.H

ifeq ($(DIM),3)
        AMR_F_SOURCES += MAKESLICE_3D.F
endif


CEXE_sources += $(AMR_C_SOURCES)
CEXE_headers += $(AMR_H_HEADERS)

FEXE_sources += $(AMR_F_SOURCES)
FEXE_headers += $(AMR_F_HEADERS)


# ------------------------------------------------------- bndrylib sources
BNDRYLIB_BASE=EXE
C$(BNDRYLIB_BASE)_sources += FabSet.C BndryRegister.C \
			     Geometry.C CoordSys.C RealBox.C
C$(BNDRYLIB_BASE)_headers += FabSet.H BndryRegister.H \
			     Geometry.H CoordSys.H RealBox.H

F$(BNDRYLIB_BASE)_headers += COORDSYS_F.H DIMS.H
F$(BNDRYLIB_BASE)_sources += COORDSYS_$(DIM)D.F


# ------------------------------------------------------- boxlib sources
BOXLIB_BASE=EXE
 
C$(BOXLIB_BASE)_headers += BoxLib.H BLVERSION.H
C$(BOXLIB_BASE)_sources += BoxLib.C

C$(BOXLIB_BASE)_sources += ParmParse.C Utility.C aString.C BArena.C
C$(BOXLIB_BASE)_headers += ParmParse.H Utility.H Assert.H aString.H

C$(BOXLIB_BASE)_headers += ArrayLim.H REAL.H Boolean.H
C$(BOXLIB_BASE)_headers += CONSTANTS.H SPACE.H SPACE_F.H
C$(BOXLIB_BASE)_headers += BArena.H Arena.H UseCount.H

C$(BOXLIB_BASE)_sources += DistributionMapping.C ParallelDescriptor.C
C$(BOXLIB_BASE)_headers += DistributionMapping.H ParallelDescriptor.H

T_sources += SimpleDPtr.C AliasedDPtr.C DPtr.C
T_headers += SimpleDPtr.H AliasedDPtr.H DPtr.H

T_sources += Array.C PArray.C List.C Pointers.C
T_headers += Array.H PArray.H List.H Pointers.H

T_sources += Tuple.C
T_headers += Tuple.H

T_headers += Misc.H

C${BOXLIB_BASE}_headers += FabConv.H FPC.H
C${BOXLIB_BASE}_sources += FabConv.C FPC.C

C$(BOXLIB_BASE)_sources += Box.C IntVect.C IndexType.C Orientation.C
C$(BOXLIB_BASE)_headers += Box.H IntVect.H IndexType.H Orientation.H

C$(BOXLIB_BASE)_sources += BoxList.C BoxArray.C BoxDomain.C
C$(BOXLIB_BASE)_headers += BoxList.H BoxArray.H BoxDomain.H

C$(BOXLIB_BASE)_sources += BoxAssoc.C
C$(BOXLIB_BASE)_headers += BoxAssoc.H

C$(BOXLIB_BASE)_sources += FArrayBox.C
C$(BOXLIB_BASE)_headers += FArrayBox.H

C$(BOXLIB_BASE)_headers += Looping.H

T_sources += BaseFab.C ArithFab.C OrderedFab.C NormedFab.C
T_headers += BaseFab.H ArithFab.H OrderedFab.H NormedFab.H

C$(BOXLIB_BASE)_sources += MultiFab.C
C$(BOXLIB_BASE)_headers += MultiFab.H

T_sources += FabArray.C
T_headers += FabArray.H


ifeq	($(USE_WINDOWS),TRUE)
# ------------------------------------------------------- graphlib sources
GRAPHTOOL_BASE=EXE
C$(GRAPHTOOL_BASE)_sources += GraphTool.C IFrame.C PSfile.C XWindow.C
C$(GRAPHTOOL_BASE)_headers += GraphTool.H IFrame.H PSfile.H XWindow.H
C$(GRAPHTOOL_BASE)_headers += XWinExterns.H
endif



# ------------------------------------------------------- multigrid sources
MGLIB_BASE=EXE
C$(MGLIB_BASE)_headers += ABecLaplacian.H \
                          BndryData.H \
                          BoundCond.H \
                          CGSolver.H \
                          InterpBndryData.H \
                          LO_BCTYPES.H \
                          Laplacian.H \
                          LinOp.H \
                          Mask.H \
                          MultiGrid.H \
                          WriteMultiFab.H

C$(MGLIB_BASE)_sources += ABecLaplacian.C \
                          BndryData.C \
                          CGSolver.C \
                          InterpBndryData.C \
                          Laplacian.C \
                          LinOp.C \
                          Mask.C \
                          MultiGrid.C \
                          WriteMultiFab.C

F$(MGLIB_BASE)_headers += ABec_F.H \
                          CG_F.H \
                          INTERPBNDRYDATA_F.H \
                          LO_F.H \
                          LP_F.H \
                          MG_F.H

F$(MGLIB_BASE)_sources += ABec_$(DIM)D.F \
                          CG_$(DIM)D.F \
                          INTERPBNDRYDATA_$(DIM)D.F \
                          LO_$(DIM)D.F \
                          LO_UTIL.F \
                          LP_$(DIM)D.F \
                          MG_$(DIM)D.F


CEXE_sources += preload.C


ifeq ($(EBASE),mgIBD)

CEXE_sources += mainIBD.C TestIBData.C
CEXE_headers += TestIBData.H

FEXE_sources += mainIBD_$(DIM)D.F
FEXE_headers += mainIBD_F.H

endif


# ------------------------------------------------------- iamr sources
# ---------------------------------------- iamr sources:  _run2d
CEXE_headers += 
CEXE_sources += NS_setup.C NSBld.C
FEXE_headers += probdata.H PROB_F.H
FEXE_sources += PROB_2D.F 


# ---------------------------------------- iamr sources:  _bndry
CEXE_sources += SyncRegister.C  ViscBndry.C  MacBndry.C 
ifeq ($(DIM),2)
CEXE_sources += ViscBndry2D.C
endif

CEXE_headers += SyncRegister.H  RegType.H  ViscBndry.H  MacBndry.H 
ifeq ($(DIM),2)
CEXE_headers += ViscBndry2D.H
endif

FEXE_headers += SYNCREG_F.H VISCOPERATOR_F.H
FEXE_sources += SYNCREG_$(DIM)D.F VISCOPERATOR_$(DIM)D.F

#
# 	Disconnect MacOperators for different mass continuity
#
ifndef ATMOS_MACOP
CEXE_sources += MacOperator.C
CEXE_headers += MacOperator.H
FEXE_sources += MACOPERATOR_$(DIM)D.F
FEXE_headers += MACOPERATOR_F.H
endif


# ---------------------------------------- iamr sources:  _ns_mac_new
CEXE_sources += Projection.C MacProj.C Godunov.C Diffusion.C NavierStokes.C 
CEXE_headers += Projection.H MacProj.H Godunov.H Diffusion.H NavierStokes.H 

ifeq ($(USE_NETCDF),TRUE)
CEXE_sources += netcdfIO.C Debug.C
CEXE_headers += netcdfIO.H
endif
						                   
FEXE_sources += DERIVE_$(DIM)D.F GODUNOV.F GODUNOV_$(DIM)D.F NAVIERSTOKES_$(DIM)D.F \
		PROJECTION_$(DIM)D.F MACPROJ_$(DIM)D.F DIFFUSION_$(DIM)D.F 

FEXE_headers += DERIVE_F.H GODUNOV.H GODUNOV_F.H PROJECTION_F.H MACPROC_F.H \
		DIFFUSION_F.H NAVIERSTOKES_F.H 





# ------------------------------------------------------- hgproj sources


LBASE=proj
#LBASE=ell

ifeq ($(LBASE),proj)
CEXE_sources += mall_info.C cache.C interface.C boundary.C interpolator.C \
       		restrictor.C fill_patch.C amr_multi.C \
		hg_multi1.C hg_multi2.C hg_multi3.C \
		hg_projector.C
ifeq	($(USE_WINDOWS),TRUE)
CEXE_sources +=	amr_graph.C
FEXE_sources += cont$(DIM)d.F
endif
CEXE_headers += cache.H interface.H boundary.H interpolator.H restrictor.H \
                fill_patch.H amr_graph.H amr_multi.H hg_multi.H hg_projector.H
FEXE_sources += amr_real$(DIM)d.F \
                hg_multi$(DIM)d.F hg_proj$(DIM)d.F hg_avg$(DIM)d.F
FEXE_headers +=
endif



ifeq ($(LBASE),ell)
CEXE_sources += amr_multi.C hg_multi1.C hg_multi2.C hg_multi3.C \
		hg_elliptic.C amr_gravity.C
CEXE_headers += amr_multi.H hg_multi.H hg_elliptic.H amr_gravity.H
FEXE_sources += hg_multi$(DIM)d.F amr_grav$(DIM)d.F
FEXE_headers +=
endif


#EBASE=driver
#EBASE=proj
#EBASE=poisson

ifeq ($(EBASE),driver)
CEXE_sources += driver.C
CEXE_headers +=
FEXE_sources +=
FEXE_headers +=
endif


ifeq ($(EBASE),proj)
CEXE_sources += proj.C
CEXE_headers +=
FEXE_sources +=
FEXE_headers +=
endif


ifeq ($(EBASE),poisson)
CEXE_sources += poisson.C
CEXE_headers +=
FEXE_sources +=
FEXE_headers +=
endif

