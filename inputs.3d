# ------------------  INPUTS TO MAIN PROGRAM  -------------------
max_step  =   10       # maximum timestep
stop_time =  10000.0   # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0
geometry.prob_hi   =  1. 1. 1.

# multigrid class
mg.usecg = 0

mg.v = 1
ns.v = 1
mac.v = 1
proj.v = 1

amr.n_cell    =  32 32 32

amr.max_level =  2            # maximum level number allowed
amr.ref_ratio       = 2 2 2 2  # refinement ratio
amr.blocking_factor = 4       # block factor in grid generation
amr.regrid_int      = 2       # how often to regrid
amr.n_error_buf     = 2 2 2 2  # number of buffer cells in error est
amr.grid_eff        = 0.7     # what constitutes an efficient grid
amr.check_int       = 10      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_file       = plt
amr.plot_int        = 10
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 64

# ----------------  BOUNDARY CONDITIONS ---------------------

ns.lo_bc          = 5 5 5
ns.hi_bc          = 5 5 5

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.visc_tol        = 1.0e-12  # tolerence for viscous solves
ns.visc_abs_tol    = 1.0e-12  # tolerence for viscous solves

ns.cfl            = 0.5	     # cfl number for hyperbolic system
ns.init_shrink    = 1.0      # scale back initial timestep
ns.change_max     = 1.1      # fraction dt can change by in one timestep
ns.visc_coef      =  -0.01  -0.01  -0.01 -0.01  -0.01  # coef of viscosity
ns.visc_coef      =  0.01  0.01  0.01 -0.01  0.01  # coef of viscosity
ns.init_iter      = 2        # number of init iters to def pressure
ns.gravity        = 0.0      # body force  (no gravity)
ns.sum_interval   = 1        # timesteps between computing mass

# ------------------  INPUTS TO PROJECTION CLASS -------------------
proj.sync_tol       = 1.0e-9   # tolerance for projections
proj.proj_tol       = 1.0e-12  # tolerance for projections
proj.proj_abs_error = 1.0e-16  # abs error for proj multigrid iter
proj.rho_wgt_vel_proj = 0      # 0 => const den proj, 1 => rho weighted
proj.bogus_value    = 5.0e+5
proj.Pcode          = 2

# ------------------  INPUTS TO MACPROJ CLASS -------------------
mac.mac_tol        = 1.0e-12  # tolerence for mac projections
mac.mac_sync_tol   = 1.0e-9   # tolerence for mac SYNC projection
mac.mac_abs_tol    = 1.0e-16
#
# Turn any of these on to generate run-time timing stats.
#
RunStats.statvar = vel_predict vel_advect scal_advect vel_update scal_update
                   mac_project mac_sync level_project sync_project
                   write_pltfile write_chkfile processor_map fab_arena
#
# Select form of FAB output: default is NATIVE
#
#   ASCII  (this is very slow)
#   NATIVE (native binary form on machine -- the default)
#   IEEE32 (useful if you want 32bit files when running in double precision)
#   8BIT   (eight-bit run-length-encoded)
#
fab.format = NATIVE
#
# Initializes DistributionMapping strategy from ParmParse.
#
# ParmParse options are:
#
#   DistributionMapping.strategy = ROUNDROBIN
#   DistributionMapping.strategy = KNAPSACK
#   DistributionMapping.strategy = RANDOM
#   DistributionMapping.strategy = SIZEBALANCED
#
# The default strategy is ROUNDROBIN.
#
DistributionMapping.strategy = KNAPSACK
DistributionMapping.strategy = ROUNDROBIN
