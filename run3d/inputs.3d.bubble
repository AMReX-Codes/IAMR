# ------------------  INPUTS TO MAIN PROGRAM  -------------------
max_step  =  2     # maximum timestep
stop_time =  10000.0   # maximum problem time

# ------------------  INPUTS TO CLASS AMR ---------------------
# set up for bubble
geometry.coord_sys      = 0        # 0 => cart, 1 => RZ
geometry.prob_lo   =  0.0 0.0 0.0
geometry.prob_hi   =  1. 1. 1.
geometry.prob_hi   =  4. 4. 4.

# multigrid class
mg.usecg = 0
mg.nu_f = 20
mg.nu_f = 10
smg.eps = 1.0e-3
mg.v = 0
mg.maxiter = 100
Lp.v = 0
Lp.harmavg = 1

amr.n_cell    =  8 8 8

amr.max_level =  0            # maximum level number allowed
amr.ref_ratio       = 2 4 2 2  # refinement ratio
amr.blocking_factor = 2       # block factor in grid generation
amr.regrid_int      = 5       # how often to regrid
amr.n_error_buf     = 2 2 2 2  # number of buffer cells in error est
amr.grid_eff        = 0.7     # what constitutes an efficient grid
amr.check_int       = 20      # number of timesteps between checkpoints
amr.check_file      = chk     # root name of checkpoint file
amr.plot_file       = plt 20
amr.grid_log        = grdlog  # name of grid logging file
amr.max_grid_size   = 64

# ------------------  INPUTS TO PHYSICS CLASS -------------------
ns.dt_cutoff      = 0.000001  # level 0 timestep below which we halt

ns.visc_tol        = 1.0e-10  # tolerence for viscous solves
ns.visc_abs_tol    = 1.0e-10  # tolerence for viscous solves

ns.cfl            = 0.5	     # cfl number for hyperbolic system
ns.init_shrink    = 0.1      # factor to scale back initial dt with
ns.change_max     = 1.1      # amt by which dt can change each timestep
ns.visc_coef      =  0.01  0.01  0.01  -0.01   0.01 # coef of viscosity
ns.visc_coef      =  -0.01  -0.01  -0.01  -0.01   -0.01 # coef of viscosity
ns.init_iter      = 1        # number of init iters to def pressure
ns.gravity        = 0.0      # body force  (no gravity)
ns.gravity        = -9.8     # body force  (gravity in MKS units)
ns.anelastic      = 0        # 0 => no anelastic approx
#ns.fixed_dt	  = 06.37755     # hardwire dt
ns.sum_interval   = 1        # timesteps between computing mass
ns.do_sync_proj   = 1        # 1 => do Sync Project
ns.do_reflux      = 1        # 1 => do refluxing
ns.do_mac_proj    = 1        # 1 => do MAC projection
ns.do_radiation   = 0        # 1 => do discrete-ordinates radiation

ns.mem_debug = 0

# ----------------  BOUNDARY CONDITIONS ---------------------------

ns.lo_bc          = 4 4 4
ns.hi_bc          = 4 4 4

# >>>>>>>>>>>>>  BC FLAGS <<<<<<<<<<<<<<<<
# 0 = Interior           3 = Symmetry
# 1 = Inflow             4 = SlipWall
# 2 = Outflow            5 = NoSlipWall

# ------------------  INPUTS TO PROJECTION CLASS -------------------
proj.proj_tol       = 1.0e-10  # tolerence for projections
proj.sync_tol       = 1.0e-8   # tolerence for projections
proj.proj_abs_error = 1.0e-15  # abs error for proj multigrid iter

proj.pres_interp    = 1
proj.rho_wgt_vel_proj = 0      # 0 => const den proj, 1 => rho weighted
proj.bogus_value    = 5.0e+5
proj.Pcode          = 1

# ------------------  INPUTS TO MACPROJ CLASS -------------------
mac.mac_tol        = 1.0e-12   # tolerence for mac projections
mac.mac_sync_tol   = 1.0e-8   # tolerence for mac SYNC projection
mac.mac_order      = 1        # interp type: 0 => pc 1 => quad 2 => jbb
mac.mac_abs_tol    = 1.0e-12

# ------------------  INPUTS TO RADIATION CLASS  -------------------
rad.order          = 4          # ordinate set (4=S4)
rad.tolerance      = 0.0000001    # tolerance on DO solver
rad.iterations     = 200        # maximum DO iterations
rad.difference     = 1          # spatial difference scheme
                                # (1=step, 2=minmod, 3=osher, 4=muscl
                                #  5=clam, 6=smart)
rad.verbose        = 1          # extensive print control (1=on)
rad.multi_level    = 1          # multi-level solution (1=on)
rad.multigrid      = 0   
rad.inertia        = 0.0

rad.absorption     = 1.0
rad.scattering     = 0.0
rad.temp           = 64.804
rad.wall_temp      = 200.0
rad.wall_emis      = 0.5
rad.wall_emis      = 1.0
rad.wall_emis      = 0.0
#
# Turn any of these on to generate run-time timing stats.
#
RunStats.statvar = vel_predict vel_advect scal_advect vel_update scal_update \
                   mac_project mac_sync level_project sync_project \
                   write_pltfile write_chkfile processor_map
#
# Select form of FAB output: default is NATIVE
#
#   ASCII  (this is very slow)
#   NATIVE (native binary form on machine -- the default)
#   IEEE32 (useful if you want 32bit files when running in double precision)
#   8BIT   (eight-bit run-length-encoded)
#
fab.format = NATIVE
#
# Initializes DistributionMapping strategy from ParmParse.
#
# ParmParse options are:
#
#   DistributionMapping.strategy = ROUNDROBIN
#   DistributionMapping.strategy = KNAPSACK
#   DistributionMapping.strategy = RANDOM
#   DistributionMapping.strategy = SIZEBALANCED
#
# The default strategy is ROUNDROBIN.
#
DistributionMapping.strategy = KNAPSACK
DistributionMapping.strategy = ROUNDROBIN


