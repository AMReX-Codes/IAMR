godunov.ppm_type =
		 0 (compute 0th, 2nd or 4th order slopes depending on the value of
		    slope_order=1, 2 (not supported by projector), or 4) DEFAULT
		 1 (van leer slopes with quadratic limiters) or
		 2 (interpolate and limit, use Colella 2008 limiters)
	* =1 tested by rt
	* =2 tested by poiseuille	
godunov.slope_order = only used if ppm_type=0
		    1 (compute 0th order slopes) -- no test needed, i think bc so simple
		    2 in Godunov, but projection gives error: 2nd order not supported
		    4 DEFAULT, 4th order
godunov.use_unlimited_slopes - only used in slopes(), so needs ppm_type=0
			       only relevant to slope_order= 2, 4
			       0 DEFAULT
godunov.use_forces_in_trans = use_minion in .F files
			    0 DEFAULT
	* =1 tested in rt
godunov.courner_couple = 1 DEFAULT
		       only in 3D
	* =0 tested in rt

advection_scheme - hard coded in advection routines
bousinesq: in GNUMakefile DEFINES += -DBOUSSINESQ
GENGETFORCE   		  DEFINES += -DGENGETFORCE
MOREGENGETFORCE           DEFINES += -DMOREGENGETFORCE
ns.do_denminmax do_scalminmax
velocity restart
use jet
sum turbulent quantities

ns.do_cons_trac  0 DEFAULT
ns.do_cons_trac2 0 DEFAULT
! Not sure why the next 2 are not one thing... predict_mom_diff never seems to really
! get used
ns.do_mom_diff = 0 DEFAULT
                 1 requires predict_mom_together=1
ns.predict_mom_together = 0 DEFAULT
			  1 requires do_mom_diff = 1
	* non-default tested in rt

anel_coeff in Proj MacProj

NOTES to self:
1. FineAdd routines in AmrCore/AMReX_FluxRegister do not use tiling. Nor
   do they appear to work with OMP. Switching to YA would probably be
   really nice....but not ready yet

BC types info table in AMReX_BC_Types.H
bc(spatial direction, hi or lo side)

instead of figuring out the "right" way to get IAMR to execute certain lines of code,
can force execution by hacking and then compare MF/fab at end.
	  //fixme - MF diff code to compare result from old code and tiled code
	  static int count=0;
	  ++count;
	  {
	    // read in result MF from unaltered version of code
	    std::string name2="../../../IAMR_old/Exec/run2d/aofsOld"+std::to_string(count);
	    std::cout << "Reading " << name2 << std::endl;
	    MultiFab mf2(aofs.boxArray(),dmap,aofs.nComp(),aofs.nGrow());
	    VisMF::Read(mf2, name2);
	    MultiFab mfdiff(mf2.boxArray(), dmap, mf2.nComp(), mf2.nGrow());
	    // Diff local MF and MF from unaltered code 
	    MultiFab::Copy(mfdiff, *aofs, 0, 0, mfdiff.nComp(), mfdiff.nGrow());
	    mfdiff.minus(mf2, 0, mfdiff.nComp(), mfdiff.nGrow());

	    for (int icomp = 0; icomp < mfdiff.nComp(); ++icomp) {
	      std::cout << "Min and max of the diff are " << mfdiff.min(icomp,mf2.nGrow()) 
			<< " and " << mfdiff.max(icomp,mf2.nGrow());
	      if (mfdiff.nComp() > 1) {
		std::cout << " for component " << icomp;
	      }
	      std::cout << "." << std::endl;
	    }
	    // write out difference MF for viewing: amrvis -mf 
	    std::cout << "Writing mfdiff" << std::endl;
	    VisMF::Write(mfdiff, "aofsdiff"+std::to_string(count));
	  }

Access data at a single point
	  //FIXME debugging - see what's in MF at my point
	  IntVect mypt {0,0};	  
	  if ((*aofs)[U_mfi].box().contains(mypt))
	      Print()<<"(*aofs)(0,0) "<<(*aofs)[U_mfi](mypt)<<"\n";

Write out a FAB for viewing with amrvis
	std::ofstream ofs ("rho"+std::to_string(ParallelDescriptor::MyProc()),
			   std::ofstream::out);
	rho[iface].writeOn(ofs);
	ParallelDescriptor::Barrier();
	Abort();
